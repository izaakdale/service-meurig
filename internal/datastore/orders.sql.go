// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package datastore

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  id,
  customer_id
) VALUES (
  $1, $2
)
RETURNING id, customer_id, status, total, created_at
`

type CreateOrderParams struct {
	ID         string `json:"id"`
	CustomerID string `json:"customer_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.ID, arg.CustomerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerOrders = `-- name: GetCustomerOrders :many
SELECT id, customer_id, status, total, created_at FROM orders
WHERE customer_id = $1
`

func (q *Queries) GetCustomerOrders(ctx context.Context, customerID string) ([]Order, error) {
	rows, err := q.db.Query(ctx, getCustomerOrders, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2
WHERE id = $1
RETURNING id, customer_id, status, total, created_at
`

type UpdateOrderStatusParams struct {
	ID     string `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrderTotalPrice = `-- name: UpdateOrderTotalPrice :one
UPDATE orders
SET total = total + $2
WHERE id = $1
RETURNING id, customer_id, status, total, created_at
`

type UpdateOrderTotalPriceParams struct {
	ID    string `json:"id"`
	Total int32  `json:"total"`
}

func (q *Queries) UpdateOrderTotalPrice(ctx context.Context, arg UpdateOrderTotalPriceParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderTotalPrice, arg.ID, arg.Total)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}
